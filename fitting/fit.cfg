[FittingRun]
title : WB_Fit

# =============================================================================
# Minimizer:
# Use Nelder-Mead simplex algorithm to minimize merit-function
# see documentation for description of other available minimizers.
# =============================================================================

# [Minimizer]
# type : NelderMead

[Minimizer]
type : Spreadsheet
filename : R_spreadsheet.csv

# =============================================================================
# Runner:
# Define a runner named 'Local'.
# This will run jobs in parallel.
#
# You can define multiple runners (i.e. to run on a remote HPC resource).
# See documentation for more.
# =============================================================================

[Runner:Local]
type : Local
nprocesses : 4

# [Runner:GADI]
# type = "PBS"
# remotehost = "ssh://lb3207@gadi.nci.org.au/~/pprofit/examples/WB/"

# lb3207@gadi.nci.org.au

# =============================================================================
# Variables:
# Place fitting variables in [Variables] section.
# Variables definitions take the form:
#   VARIABLE_NAME : INITIAL_VALUE [(LOWERBOUND, UPPERBOUND)] [*]
#
# Where:
#   VARIABLE_NAME :
#       Label by which the variable is identified within the fitting system.
#   INITIAL_VALUE :
#       The starting value for the variable.
#   (LOWERBOUND, UPPERBOUND) :
#       Specify the desired range for a particular variable.
#       For minimizers supporting bounds these constrain variable values to
#       sit in range LOWERBOUND < value < UPPERBOUND.
#   *:
#       An asterisk at the end of a variable line indicates that the variable
#       should be optimised during fitting. If no asterisk appears, the
#       variable will be held fixed.
# =============================================================================

# TODO
# test W_W_lambda3 = 0

[Variables]
W_W_gamma : 1.294000e-03
W_W_c : 1.327324
W_W_d : 0.135096
W_W_h : 0.352000
W_W_beta : 1.38528
W_W_lambda1 : 2.890383
W_W_lambda2 : 1.304692
W_W_lambda3 : 0.45876 
W_W_R : 4.400
W_W_D : 0.840189
W_W_A : 3313.9454
W_W_B : 148.328

W_B_gamma : 1.0
W_B_c : 2.246886711
W_B_d : 0.500709837
W_B_h : 0.283499075
# W_B_beta = 1 is a wild guess
W_B_beta : 144.8943687152865
W_B_lambda1 : 2.902702087
W_B_lambda2 : 1.857152986
W_B_lambda3 : 0.095580474
W_B_R : 3 *
W_B_D : 0.5
W_B_A : 3351.165521
W_B_B : 951.3620474

B_B_gamma : 1.0
B_B_c : 41883.6236
B_B_d : 88.5142
B_B_h : -0.0818
B_B_beta : 0.01499
B_B_lambda1 : 2.6857
B_B_lambda2 : 2.5212
B_B_lambda3 : 0.000023762
B_B_R : 2.28
B_B_D : 0.11
B_B_A : 3376.3351
B_B_B : 2768.7364

# =============================================================================
# Optional sections, see documentation for more (uncomment to use):
#
# [CalculatedVariables]
#   Contains formulae that calculate variables from values contained in
#   [Variables] section.

# [MetaEvaluator:EVALUATOR_NAME]
#   Meta evaluators can be thought of as evaluators that are called after job
#   evaluation and therefore have access to the values extracted by the job
#   level evaluators. Rather than being associated with a single job,
#   meta-evaluators are associated with the fitting run as a whole. Sitting
#   above the jobs in this way means meta-evaluators can be used for many
#   purposes. See documentation for more.
#
# =============================================================================
