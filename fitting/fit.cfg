[FittingRun]
title : WB_Fit

# =============================================================================
# Minimizer:
# Use Nelder-Mead simplex algorithm to minimize merit-function
# see documentation for description of other available minimizers.
# =============================================================================

[Minimizer]
type : NelderMead

# =============================================================================
# Runner:
# Define a runner named 'Local'.
# This will run jobs in parallel.
#
# You can define multiple runners (i.e. to run on a remote HPC resource).
# See documentation for more.
# =============================================================================

[Runner:Local]
type : Local
nprocesses : 4

# [Runner:GADI]
# type = "PBS"
# remotehost = "ssh://lb3207@gadi.nci.org.au/~/pprofit/examples/WB/"

# lb3207@gadi.nci.org.au

# =============================================================================
# Variables:
# Place fitting variables in [Variables] section.
# Variables definitions take the form:
#   VARIABLE_NAME : INITIAL_VALUE [(LOWERBOUND, UPPERBOUND)] [*]
#
# Where:
#   VARIABLE_NAME :
#       Label by which the variable is identified within the fitting system.
#   INITIAL_VALUE :
#       The starting value for the variable.
#   (LOWERBOUND, UPPERBOUND) :
#       Specify the desired range for a particular variable.
#       For minimizers supporting bounds these constrain variable values to
#       sit in range LOWERBOUND < value < UPPERBOUND.
#   *:
#       An asterisk at the end of a variable line indicates that the variable
#       should be optimised during fitting. If no asterisk appears, the
#       variable will be held fixed.
# =============================================================================

[Variables]
W_W_B_c : 1.79229
W_W_B_d : 0.14679
# W_W_B_gamma : 0.14679
W_W_B_h : 0.71342
W_W_B_beta : 0.0 
W_W_B_lambda1 : 0.0 
W_W_B_lambda2 : 0.0 
W_W_B_lambda3 : 0.0
W_W_B_A : 0.0
W_W_B_B : 0.0
W_W_B_R : 2.7301949999999997
W_W_B_D : 0.20273287499999998

W_B_W_c : 2.30627
W_B_W_d : 0.14640
W_B_W_h : 0.78686
W_B_W_beta : 0.0 
W_B_W_lambda1 : 0.0 
W_B_W_lambda2 : 0.0 
W_B_W_lambda3 : 0.0
W_B_W_A : 0.0
W_B_W_B : 0.0
W_B_W_R : 2.79718
W_B_W_D : 0.20021

W_B_B_c : 2.12050
W_B_B_d : 0.15937 
W_B_B_h : 0.776057934 
W_B_B_beta : 0.045250 (0.0, 1.80370)
# W_B_B_lambda1 : 4.389695 (2.70264, 5) *
# W_B_B_lambda2 : 1.96622  (1.482259, 3)
W_B_B_lambda1 : 2.5446255 (1.8, 2.99) 
W_B_B_lambda2 : 1.9526635347442618
W_B_B_lambda3 : 0.583760 (0, 2.5) 
W_B_B_A : 18064.918736
W_B_B_B : 168.932735  
W_B_B_R : 0.3477722720810493
W_B_B_D : 0.24030052373129768

B_W_W_c : 42762.66261
B_W_W_d : 86.50456 
B_W_W_h : 0.8373550480 *
B_W_W_beta : 0.037152 (0.0, 1.80370)
# B_W_W_lambda1 : 4.389695 (2.70264, 5) * 
# B_W_W_lambda2 : 1.96622  (1.482259, 3) 
B_W_W_lambda1 : 2.4565 (1.8, 2.96) 
B_W_W_lambda2 : 1.6166808619003288
B_W_W_lambda3 : 0.45876
B_W_W_A : 19222.926347
B_W_W_B : 168.932735  
B_W_W_R : 3.2989543639969243
B_W_W_D : 0.2316481076621541

B_W_B_c : 43107.38380
B_W_B_d : 102.33045
B_W_B_h : 0.76288
B_W_B_beta : 0.0 
B_W_B_lambda1 : 0.0 
B_W_B_lambda2 : 0.0 
B_W_B_lambda3 : 0.0
B_W_B_A : 0.0
B_W_B_B : 0.0
B_W_B_R : 2.79797 
B_W_B_D : 0.20211 

B_B_W_c : 45477.34192
B_B_W_d : 114.14848
B_B_W_h : 0.78262
B_B_W_beta : 0.0 
B_B_W_lambda1 : 0.0 
B_B_W_lambda2 : 0.0 
B_B_W_lambda3 : 0.0
B_B_W_A : 0.0
B_B_W_B : 0.0
B_B_W_R : 2.80009
B_B_W_D : 0.20273

# =============================================================================
# Optional sections, see documentation for more (uncomment to use):
#
# [CalculatedVariables]
#   Contains formulae that calculate variables from values contained in
#   [Variables] section.

# [MetaEvaluator:EVALUATOR_NAME]
#   Meta evaluators can be thought of as evaluators that are called after job
#   evaluation and therefore have access to the values extracted by the job
#   level evaluators. Rather than being associated with a single job,
#   meta-evaluators are associated with the fitting run as a whole. Sitting
#   above the jobs in this way means meta-evaluators can be used for many
#   purposes. See documentation for more.
#
# =============================================================================
